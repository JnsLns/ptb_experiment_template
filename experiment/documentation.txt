The general idea of this template code is that to create a new
experiment, functions and files in the private folder do not need to be
touched - they can be used as is. Paradigm-specific modifications should
be made only in experiment.m (adding settings, opening psychtoolbox
windows; things that need to be done before or after all trials),
singleTrial.m (sequence of events in each trial; getting responses;
specifying output variables to be stored), and drawStimuli.m (draw
stimulus items to psychtoolbox offscreen windows for presentation in
singleTrial.m).


                 _____Script input and output_____


Trial generation --> struct 'tg', stored in each trial file and loaded
                     in the current script anew for each participant.
                     Fields:

                     tg.triallist     Matrix, rows are individual trials
                                      columns are trial properties
                     tg.s.triallistCols Struct, each of whose fields holds
                                      an integer that can be used to
                                      address into the columns of
                                      tg.triallist. Used to address trial
                                      properties "by name" instead of
                                      column number.
                     tg.s             Struct with various fields that hold
                                      settings for the experiment that
                                      apply across trials (e.g.,
                                      background color).

Experiment (this script) --> struct 'e', stored in each results file
                             Fields:

                      e.results       Matrix, each row corresponding to
                                      one presented trial, and columns
                                      pertaining to different response or
                                      trial properties.
                      e.s.resCols     Struct, function analogous to
                                      'tg.s.triallistCols' (see above)
                                      but for 'e.results'.
                      e.s             Struct with various fields that
                                      hold settings for the experiment
                                      (including copies of all fields of
                                      'tg.s', except 'triallistCols')


                    _____Specifying outputs_____

SUMMARY: Everything written to fields of struct 'out' during trials will
autoimatically be stored it in the results matrix ('e.results'). Add
fields to 'out' as needed, but assign only integers or column vectors.
Columns of the results matrix can later be addressed "by name" using
column indices in fields of 'e.s.resCols'. 

DETAILS: An empty struct 'out' is created/reset before each trial. Fields
can be created in this struct as needed during the trial (preferably in
singleTrial.m); a column vector or an integer should be written to each
field.
When a trial ends, the objects stored in the fields of 'out' will be
transformed into a row of results values and this row is written to the
results matrix ('e.results').

To be able to address into the columns of 'e.results' later, a struct
'e.s.resCols' is automatically created. Its fields hold integers that
are column indices into 'e.results', allowing to address the columns
"by name". The fields of e.s.resCols are named after the fields that
exist in 'out' at the end of a trial. For instance, 
 
>> out.RT = 1150;                  % say this happens in the 10th trial.

>> e.s.resCols.RT                 % later check what column number has
ans = 12                          % been automatically assigned to RT.
 
>> e.results(10, e.s.resCols.RT)  % it can be used during analysis to
ans = 1150                        % address into the results matrix.       

If the value of a field of 'out' is a column vector then its elements
will be written to the results matrix in consecutive columns and
e.s.resCols will have two fields for this object, one to address into the
first column of the span of values, the other addressing into the last
column. These two fields are named the same as the respective field of
'out' except for being postfixed with 'Start' and 'End', respectively.
For instance,
 
>> out.foo = [1,2,3];             % say this happens in the 10th trial.

>> e.s.resCols.fooStart
ans = 12
>> e.s.resCols.fooEnd   
and = 14

>> e.results(10, e.s.resCols.fooStart:e.s.resCols.fooEnd)                                    
ans = [1,2,3]

The absolute values of the column indices depend on how many fields have
been created before. It is possible to add fields to 'out' that were not
used in earlier trials, in which case rows in e.results from preceding
trials will be filled with nans in these columns. Note however that once
a field has been used, the objects stored in it must be of the same size
in each trial (pad with nans if needed).


                  _____Experiment settings_____

Most settings for the experiment have to be defined already during trial
generation and are assumed to be found in struct 'tg.s' loaded from a
trial file. This ensures that once trials have been generated and saved,
experiment settings are not changed accidently halfway through
participants. Note that all fields found in 'tg.s' will be copied to
'e.s' here (except for field 'triallistCols') so that 'tg' will not be
needed for analysis.

There are only a few settings that must be set here in the experimental
script itself (these are as well stored in 'e.s'), namely those that
pertain to specific properties of the hardware used or the spatial
arrangement, such as screen size or viewing distance of the participant.
These are set here in order to allow things like switching to a different
screen halfway through participants. The actual sizes of stimuli on
the screen as well as other spatial properties are computed dynamically
in the current script based on these settings, so that all distances and
sizes will automatically adhere to the desired visual angle values
specified in the trial list.



                   _____Spatial reference frames_____

SUMMARY: All input and output to and from this script is in the
presentation-area-based frame and in degrees visual angle EXCEPT for
trajectory data (which is in the same frame but in millimeters) and very
few settings that make sense only in millimeters (like physical screen
size; these are postfixed '_mm') or pixels (like screen resolution;
postfixed '_px'). 

DETAILS: There are three spatial reference frames used here:

-- Presentation-area-based-frame (pa):
 
Used for all input to and output from this script, that is, in trial
generation (struct 'tg' loaded from trial file) and for results output,
that is, everything that is stored in the output struct 'e'. The origin
is at the bottom left of the presentation area (rectangular area whose
size is defined in 'tg' and which is inset in and centered within the
screen), x-axis increases to the right, y-axis increases upward. Units
used in conjunction with this frame are degrees of visual angle (va),
except for very few exceptions, which are: (1) Trajectory data (in
e.trajectories), which uses this frame but is in millimeters (as visual
angle does not make much sense for 3D data; the positive z-axis extends
toward the viewer and is orthogonal to the screen surface) and (2) a few
settings that make sense only in millimeters (these settings are clearly
marked by the postfix '_mm' in the fieldname in struct 'e.s').

-- Psychtoolbox frame (ptb):

Used *only* in the internals of the trial script (singleTrial.m) when
drawing things to the screen via Psychtoolbox. The origin is at the top
left of the screen, x-axis increasing to the right, y-axis increasing
downward. Units used in conjunction with this frame are pixels.

-- Screen-marker-based frame (scr):

This is the frame in which pointer position is obtained from function
getTip_pa (see private folder) during the experiment.
(Apart from a prespecified offset, as explained below) its origin is at
the position of the marker mounted at the lower left of the screen's
visible image area, its positive x-axis points in the direction
of the marker mounted at the lower right corner of the visible image
area, the positive x-y-plane is defined by the marker on the top border
of the visible image (at a positive x-value). The z-axis extends toward
the viewer. As hinted above, this frame (i.e., what is obtained from
getTip_pa) is offset in x/y/z direction by the three-element vector in
e.s.markerCRFoffset_xyz_mm, the main use of which is to shift the
x-y-plane(z=0) right onto the screen surface despite marker diodes being
mounted somewhat above the screen surface.



                ____CRF/unit conversion functions____

The private folder contains functions that allow converting between the
different reference frames, by passing the values to be converted 
plus the struct 'e.s.spatialConfig' (which holds all relevant information
about the spatial setup, such as viewing distance, screen extent etc).
All these functions follow the same naming scheme (see the individual
functions' documentations for more info). Naming examples:

paVaToPtbPx  -->  convert from presentation-area-based frame (pa) in
                  degrees visual angle (va) to Psychtoolbox frame (ptb)
                  in pixels (px).

scrMmToPaMm  -->  convert from screen-marker-based frame (scr) in
                  millimeters (mm) to presentation-area-based frame (pa)
                  in millimeters (mm).

pxToMm       -->  convert from pixels (px) to millimeters (mm).



                _____Conditions, responses & codes_____
Conditions, responses, and response types, plus corresponding column
names and codes used in 'e.results':
                TRIAL TYPE     PRESENT RESPONSE       RESPONSE TYPE
-------------------------------------------------------------------------
e.s.resCols     .trialType   .tgtPresentResponse      .responseType  
-------------------------------------------------------------------------
             tgt present (1) | tgt present (1) | hit                  (1)
             tgt present (1) | tgt absent  (0) | miss                 (2)
             both present(2) | tgt present (1) | illusory conjunction (3)
             both present(2) | tgt absent  (0) | correct rejection BP (4)
             color only  (3) | tgt present (1) | feature error        (5)
             color only  (3) | tgt absent  (0) | correct rejection CO (6)



                   _____Trial abortion & codes_____

Trials may be aborted before completion due to various reasons. Any data
pertaining to aborted trials will nonetheless be stored in e.results,
including an abort code (column number is e.s.resCols.abortCode) giving
the reason for abortion. These are:
0     trial completed
1     not moved to starting position in time
2     moved off starting position during fixation phase
3     moved off starting position during stimulus presentation
4     exceeded max RT for location response
5     exceeded max RT for target presence response
Any missing results values for prematurely aborted trials (e.g., response
correctness) will be nan in 'e.results' and cells in 'e.trajectories' will
contain an empty matrix if recording has not started yet (if abortion
instead occurs during recording, an incomplete trajectory will be stored).