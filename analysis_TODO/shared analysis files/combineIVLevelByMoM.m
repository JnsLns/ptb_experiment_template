% Compute mean of means over the data of IV-level sets specified in 
% a.s.ivs{IV,a.s.ivsCols.joinVals}. This is the (default) alternative to
% joining levels by combining rowSets, which is instead done, in
% combineRowSets.m, depending on the setting a.s.combineLevelsByMeanOfMeansNotGrandMean

if a.s.combineLevelsByMeanOfMeansNotGrandMean
    
    warning('off','cellMeanFun:EmptyCells');
    
    joinValCodeBase = 909090; % basis for coding values used for sets of joined
    % values (defined in a.s.ivsCols.joinVals). The actual
    % values are generated by increasing this number in
    % steps of 1 and are entered into a.s.ivsCols.values.
    % They can be used to define differences between
    % joined values in a.s.ivsCols.diffs. joinValCodeBase
    % should be chosen such that the resulting new code
    % values do not conflict with any already existing
    % ones.
    
    disp(['Merging IV-levels'])
    
    for curIv = 1:size(a.s.ivs,1)
        
        joinValCodeCounter = joinValCodeBase;
        
        % loop over sets of values to be joined 
        for curJoinSetNum = 1:numel(a.s.ivs{curIv,a.s.ivsCols.joinVals})                       
            
            % set of code values (referring to a.s.ivsCols.values) that are joined
            joinSetValues = a.s.ivs{curIv,a.s.ivsCols.joinVals}{curJoinSetNum};
            
            % Find labels (only for displaying)
            joinedLevelsLabels = {};
            for curCodeNum =  1:numel(joinSetValues)
                curCode = joinSetValues(curCodeNum);
                joinedLevelsLabels{curCodeNum} = [' ', a.s.ivs{curIv,a.s.ivsCols.valLabels}{a.s.ivs{curIv,a.s.ivsCols.values}==curCode}];
            end
            fprintf(['\tIV :' a.s.ivs{curIv,a.s.ivsCols.name} ', joined levels: ' strjoin(joinedLevelsLabels) '\n']);
            
            % identify pages of data arrays that are to be combined
            joinPages = find(arrayfun(@(x) any(x==joinSetValues), a.s.ivs{curIv,a.s.ivsCols.values}));
            % find pages that are not part of the current merge
            nonJoinPages = find(~ismember(1:size(a.res.ncs,curIv),joinPages));
                        
            
            % combine to be joined pages by mean of means
            % and add result as additional last page to a.s.rowSets.
            %
            % note for understanding this code: for fields where cellMean
            % is not used (but a sum or merge is required, e.g., .ind),
            % first, the pages not involved in the current join set are deleted,
            % then the collapse/sum is done, and, finally, the resulting page
            % is concatenated as last page to the existing array; the same
            % result is achieved by functionality of cellMean)
                       
            % ---.res
                        
            if a.s.someFlippingHasOccurred                
                a.res.flipped = cat(curIv,a.res.flipped,cellCollapse(cellPageDelete(a.res.flipped,curIv,nonJoinPages),curIv,1));                                                 
            end                       
            a.res.ind = cat(curIv,a.res.ind,cellCollapse(cellPageDelete(a.res.ind,curIv,nonJoinPages),curIv,1));                                                 
            a.res.std = cellMean(a.res.std,curIv,joinPages,1);
            a.res.avg = cellMean(a.res.avg,curIv,joinPages,1);                                   
            a.res.ncs = cat(curIv,a.res.ncs,sum(cellPageDelete(a.res.ncs,curIv,nonJoinPages),curIv));
                  
            % Check for zero cases or imbalanced contributions of balancing
            % categories to any of the IV-level combinations and issue
            % warning (only once) if any
            if a.s.balancingByMeanOfMeans                            
                aTmp.ncs_ind = cat(curIv,aTmp.ncs_ind,cellCollapse(cellPageDelete(aTmp.ncs_ind,curIv,nonJoinPages),curIv,2));                                        
                for curNcsCell = 1:numel(aTmp.ncs_ind) % go through all cells                    
                    if size(aTmp.ncs_ind{curNcsCell},2)>1 % if has been merged                                            
                        tmp = aTmp.ncs_ind{curNcsCell}>0;
                        tmp = sum(tmp,2);
                        if numel(unique(tmp))~=1
                            warning('combIVL:errBal',['When merging IV-levels by mean of means it is required that EITHER all ', ...
                                'source-levels being joined into one combined condition contain some ', ...
                                'trials from each balancing category OR, should each source-level *not* ', ...
                                'contain trials from each balancing category, then the number ', ...
                                'of source-levels which contribute data from a given balancing category must be equal across ', ...
                                'all balancing categories! In other words: Each balancing category must go into ', ...
                                'each level-merge an equal number of times. Anyway, this is not the case with ', ...
                                'the current settings or data set (probably due to zero trials in some source-levels ', ...
                                'caused by incorrect responses). This can be very problematic because this means some ', ...
                                'balancing categories affect the overall mean of means more strongly and may thus bias', ...
                                ' the overall mean toward the effect within the overrepresetend balancing category! ', ...
                                'Consider excluding participants with such zero cases.']);   
                            warning('off','combIVL:errBal');
                            disp('Erroneous data that caused the above warning:');
                            subsTmp = ind2subAll(size(aTmp.ncs_ind),curNcsCell);                            
                            % Display further info
                            disp(['     merged IV levels: ',  strjoin(joinedLevelsLabels)]);
                            for curLvl = 1:numel(subsTmp)                                
                                if curLvl == curIv
                                    continue;
                                end
                                if strcmp(a.s.ivs(curLvl,a.s.ivsCols.name),'internalPtsDim')
                                    try
                                    disp(['     participant file: ', a.s.files{a.s.ivs{curLvl,a.s.ivsCols.values}(subsTmp(curLvl))} ,' (pts code: ' num2str(a.s.ivs{curLvl,a.s.ivsCols.values}(subsTmp(curLvl))) ')']);    
                                    catch
                                    disp(['     participant file: unknown (pts code: ' num2str(a.s.ivs{curLvl,a.s.ivsCols.values}(subsTmp(curLvl))) ')']);    
                                    end
                                else
                                disp(['     IV: ', a.s.ivs{curLvl,a.s.ivsCols.name}, ', value: ', a.s.ivs{curLvl,a.s.ivsCols.valLabels}{subsTmp(curLvl)}]);
                                end                                
                            end                            
                        end
                        aTmp.ncs_ind{curNcsCell} = sum(aTmp.ncs_ind{curNcsCell},2);                            
                    end                                                            
                end                                
            end                                                                                                             
                        
            % --- .trj
            
            % - .ind
            
            a.trj.raw.pos.ind = cat(curIv,a.trj.raw.pos.ind,cellCollapse(cellPageDelete(a.trj.raw.pos.ind,curIv,nonJoinPages),curIv,1));                                                             
            if a.s.doCompute_spdVelAcc                
                a.trj.raw.spd.ind = cat(curIv,a.trj.raw.spd.ind,cellCollapse(cellPageDelete(a.trj.raw.spd.ind,curIv,nonJoinPages),curIv,1));                                                                             
                a.trj.raw.vel.ind = cat(curIv,a.trj.raw.vel.ind,cellCollapse(cellPageDelete(a.trj.raw.vel.ind,curIv,nonJoinPages),curIv,1));                                                             
                a.trj.raw.acc.ind = cat(curIv,a.trj.raw.acc.ind,cellCollapse(cellPageDelete(a.trj.raw.acc.ind,curIv,nonJoinPages),curIv,1));                                                                             
            end
                                   
            % - .wrp
            
            a.trj.wrp.pos.ind = cat(curIv,a.trj.wrp.pos.ind,cellCollapse(cellPageDelete(a.trj.wrp.pos.ind,curIv,nonJoinPages),curIv,1));                                                             
            a.trj.wrp.pos.std = cellMean(a.trj.wrp.pos.std,curIv,joinPages,1);
            a.trj.wrp.pos.avg = cellMean(a.trj.wrp.pos.avg,curIv,joinPages,1);                                    
            
            if a.s.doCompute_spdVelAcc
                
                a.trj.wrp.spd.ind = cat(curIv,a.trj.wrp.spd.ind,cellCollapse(cellPageDelete(a.trj.wrp.spd.ind,curIv,nonJoinPages),curIv,1));                                                                                                  
                a.trj.wrp.spd.std = cellMean(a.trj.wrp.spd.std,curIv,joinPages,1); 
                a.trj.wrp.spd.avg = cellMean(a.trj.wrp.spd.avg,curIv,joinPages,1); 
                
                a.trj.wrp.vel.ind = cat(curIv,a.trj.wrp.vel.ind,cellCollapse(cellPageDelete(a.trj.wrp.vel.ind,curIv,nonJoinPages),curIv,1));                                                                                                  
                a.trj.wrp.vel.std = cellMean(a.trj.wrp.vel.std,curIv,joinPages,1); 
                a.trj.wrp.vel.avg = cellMean(a.trj.wrp.vel.avg,curIv,joinPages,1); 
                                
                a.trj.wrp.acc.ind = cat(curIv,a.trj.wrp.acc.ind,cellCollapse(cellPageDelete(a.trj.wrp.acc.ind,curIv,nonJoinPages),curIv,1));                                                                                                  
                a.trj.wrp.acc.std = cellMean(a.trj.wrp.acc.std,curIv,joinPages,1); 
                a.trj.wrp.acc.avg = cellMean(a.trj.wrp.acc.avg,curIv,joinPages,1); 
                
            end           
            
            if a.s.doCompute_aucMaxDev
                
                a.trj.wrp.mDev.ind = cat(curIv,a.trj.wrp.mDev.ind,cellCollapse(cellPageDelete(a.trj.wrp.mDev.ind,curIv,nonJoinPages),curIv,1));                                                                                 
                a.trj.wrp.mDev.std = cell2mat(cellMean(num2cell(a.trj.wrp.mDev.std),curIv,joinPages,1)); 
                a.trj.wrp.mDev.avg = cell2mat(cellMean(num2cell(a.trj.wrp.mDev.avg),curIv,joinPages,1)); 
                                      
                a.trj.wrp.auc.ind = cat(curIv,a.trj.wrp.auc.ind,cellCollapse(cellPageDelete(a.trj.wrp.auc.ind,curIv,nonJoinPages),curIv,1));                                                                                 
                a.trj.wrp.auc.std = cell2mat(cellMean(num2cell(a.trj.wrp.auc.std),curIv,joinPages,1)); 
                a.trj.wrp.auc.avg = cell2mat(cellMean(num2cell(a.trj.wrp.auc.avg),curIv,joinPages,1)); 
                
            end
            
            % PROTOTYPE START
            a.trj.wrp.ang.tgt.ind = cat(curIv,a.trj.wrp.ang.tgt.ind,cellCollapse(cellPageDelete(a.trj.wrp.ang.tgt.ind,curIv,nonJoinPages),curIv,1));
            a.trj.wrp.ang.tgt.std = cellMean(a.trj.wrp.ang.tgt.std,curIv,joinPages,1);
            a.trj.wrp.ang.tgt.avg = cellMean(a.trj.wrp.ang.tgt.avg,curIv,joinPages,1);
            
            a.trj.wrp.ang.ref.ind = cat(curIv,a.trj.wrp.ang.ref.ind,cellCollapse(cellPageDelete(a.trj.wrp.ang.ref.ind,curIv,nonJoinPages),curIv,1));
            a.trj.wrp.ang.ref.std = cellMean(a.trj.wrp.ang.ref.std,curIv,joinPages,1);
            a.trj.wrp.ang.ref.avg = cellMean(a.trj.wrp.ang.ref.avg,curIv,joinPages,1);
            
            a.trj.wrp.ang.dtr.ind = cat(curIv,a.trj.wrp.ang.dtr.ind,cellCollapse(cellPageDelete(a.trj.wrp.ang.dtr.ind,curIv,nonJoinPages),curIv,1));
            a.trj.wrp.ang.dtr.std = cellMean(a.trj.wrp.ang.dtr.std,curIv,joinPages,1);
            a.trj.wrp.ang.dtr.avg = cellMean(a.trj.wrp.ang.dtr.avg,curIv,joinPages,1);
            % PROTOTYPE END
            
            % - .alg
            
            if a.s.doCompute_aligned
                a.trj.alg.pos.ind = cat(curIv,a.trj.alg.pos.ind,cellCollapse(cellPageDelete(a.trj.alg.pos.ind,curIv,nonJoinPages),curIv,1));
                a.trj.alg.pos.std = cellMean(a.trj.alg.pos.std,curIv,joinPages,1);
                a.trj.alg.pos.avg = cellMean(a.trj.alg.pos.avg,curIv,joinPages,1);
                
                if a.s.doCompute_spdVelAcc
                    
                    a.trj.alg.spd.ind = cat(curIv,a.trj.alg.spd.ind,cellCollapse(cellPageDelete(a.trj.alg.spd.ind,curIv,nonJoinPages),curIv,1));
                    a.trj.alg.spd.std = cellMean(a.trj.alg.spd.std,curIv,joinPages,1);
                    a.trj.alg.spd.avg = cellMean(a.trj.alg.spd.avg,curIv,joinPages,1);
                    
                    a.trj.alg.vel.ind = cat(curIv,a.trj.alg.vel.ind,cellCollapse(cellPageDelete(a.trj.alg.vel.ind,curIv,nonJoinPages),curIv,1));
                    a.trj.alg.vel.std = cellMean(a.trj.alg.vel.std,curIv,joinPages,1);
                    a.trj.alg.vel.avg = cellMean(a.trj.alg.vel.avg,curIv,joinPages,1);
                    
                    a.trj.alg.acc.ind = cat(curIv,a.trj.alg.acc.ind,cellCollapse(cellPageDelete(a.trj.alg.acc.ind,curIv,nonJoinPages),curIv,1));
                    a.trj.alg.acc.std = cellMean(a.trj.alg.acc.std,curIv,joinPages,1);
                    a.trj.alg.acc.avg = cellMean(a.trj.alg.acc.avg,curIv,joinPages,1);
                    
                end
            end
                                                
            % add data about new page in a.s.rowSets to a.s.ivs
            joinValCodeCounter = joinValCodeCounter + 1;
            a.s.ivs{curIv,a.s.ivsCols.valLabels}{end+1} = ['MoM over ', strjoin(a.s.ivs{curIv,a.s.ivsCols.valLabels}(joinPages),'&')];
            a.s.ivs{curIv,a.s.ivsCols.values}(end+1) = joinValCodeCounter;                        
            
        end
           
        % for the current IV, remove pages only added for joining from data
        % arrays and remove info about these from ivs        
        
        % Find pages corresponding to values only added for joining 
        pagesOnlyJoin = find(ismember(a.s.ivs{curIv,a.s.ivsCols.values},a.s.ivs{curIv,a.s.ivsCols.tmpValsJoin}));       
        % Remove info about the corresponding IV-levels from a.s.ivs
        a.s.ivs{curIv,a.s.ivsCols.valLabels}(pagesOnlyJoin)=[];
        a.s.ivs{curIv,a.s.ivsCols.values}(pagesOnlyJoin)=[];
        % Remove pages from data arrays                        
        if a.s.someFlippingHasOccurred
            a.res.flipped = cat(curIv,a.res.flipped,cellCollapse(cellPageDelete(a.res.flipped,curIv,nonJoinPages),curIv,1));
        end
        a.res.ind = cellPageDelete(a.res.ind,curIv,pagesOnlyJoin);        
        a.res.std = cellPageDelete(a.res.std,curIv,pagesOnlyJoin);
        a.res.avg = cellPageDelete(a.res.avg,curIv,pagesOnlyJoin);
        if a.s.balancingByMeanOfMeans
            aTmp.ncs_ind = cellPageDelete(aTmp.ncs_ind,curIv,pagesOnlyJoin);
        end
        a.res.ncs = cellPageDelete(a.res.ncs,curIv,pagesOnlyJoin);
        a.trj.raw.pos.ind = cellPageDelete(a.trj.raw.pos.ind,curIv,pagesOnlyJoin);
        if a.s.doCompute_spdVelAcc
            a.trj.raw.spd.ind = cellPageDelete(a.trj.raw.spd.ind,curIv,pagesOnlyJoin);
            a.trj.raw.vel.ind = cellPageDelete(a.trj.raw.vel.ind,curIv,pagesOnlyJoin);
            a.trj.raw.acc.ind = cellPageDelete(a.trj.raw.acc.ind,curIv,pagesOnlyJoin);
        end
        a.trj.wrp.pos.ind = cellPageDelete(a.trj.wrp.pos.ind,curIv,pagesOnlyJoin);
        a.trj.wrp.pos.std = cellPageDelete(a.trj.wrp.pos.std,curIv,pagesOnlyJoin);
        a.trj.wrp.pos.avg = cellPageDelete(a.trj.wrp.pos.avg,curIv,pagesOnlyJoin);
        if a.s.doCompute_spdVelAcc            
            a.trj.wrp.spd.ind = cellPageDelete(a.trj.wrp.spd.ind,curIv,pagesOnlyJoin);
            a.trj.wrp.spd.std = cellPageDelete(a.trj.wrp.spd.std,curIv,pagesOnlyJoin);
            a.trj.wrp.spd.avg = cellPageDelete(a.trj.wrp.spd.avg,curIv,pagesOnlyJoin);
            a.trj.wrp.vel.ind = cellPageDelete(a.trj.wrp.vel.ind,curIv,pagesOnlyJoin);
            a.trj.wrp.vel.std = cellPageDelete(a.trj.wrp.vel.std,curIv,pagesOnlyJoin);
            a.trj.wrp.vel.avg = cellPageDelete(a.trj.wrp.vel.avg,curIv,pagesOnlyJoin);
            a.trj.wrp.acc.ind = cellPageDelete(a.trj.wrp.acc.ind,curIv,pagesOnlyJoin);
            a.trj.wrp.acc.std = cellPageDelete(a.trj.wrp.acc.std,curIv,pagesOnlyJoin);
            a.trj.wrp.acc.avg = cellPageDelete(a.trj.wrp.acc.avg,curIv,pagesOnlyJoin);
        end        
        if a.s.doCompute_aucMaxDev            
            a.trj.wrp.mDev.ind = cellPageDelete(a.trj.wrp.mDev.ind,curIv,pagesOnlyJoin);
            a.trj.wrp.mDev.std = cellPageDelete(a.trj.wrp.mDev.std,curIv,pagesOnlyJoin);
            a.trj.wrp.mDev.avg = cellPageDelete(a.trj.wrp.mDev.avg,curIv,pagesOnlyJoin);            
            a.trj.wrp.auc.ind = cellPageDelete(a.trj.wrp.auc.ind,curIv,pagesOnlyJoin);
            a.trj.wrp.auc.std = cellPageDelete(a.trj.wrp.auc.std,curIv,pagesOnlyJoin);
            a.trj.wrp.auc.avg = cellPageDelete(a.trj.wrp.auc.avg,curIv,pagesOnlyJoin);            
        end
        if a.s.doCompute_aligned
            a.trj.alg.pos.ind = cellPageDelete(a.trj.alg.pos.ind,curIv,pagesOnlyJoin);
            a.trj.alg.pos.std = cellPageDelete(a.trj.alg.pos.std,curIv,pagesOnlyJoin);
            a.trj.alg.pos.avg = cellPageDelete(a.trj.alg.pos.avg,curIv,pagesOnlyJoin);            
            if a.s.doCompute_spdVelAcc                
                a.trj.alg.spd.ind = cellPageDelete(a.trj.alg.spd.ind,curIv,pagesOnlyJoin);
                a.trj.alg.spd.std = cellPageDelete(a.trj.alg.spd.std,curIv,pagesOnlyJoin);
                a.trj.alg.spd.avg = cellPageDelete(a.trj.alg.spd.avg,curIv,pagesOnlyJoin);                
                a.trj.alg.vel.ind = cellPageDelete(a.trj.alg.vel.ind,curIv,pagesOnlyJoin);
                a.trj.alg.vel.std = cellPageDelete(a.trj.alg.vel.std,curIv,pagesOnlyJoin);
                a.trj.alg.vel.avg = cellPageDelete(a.trj.alg.vel.avg,curIv,pagesOnlyJoin);                
                a.trj.alg.acc.ind = cellPageDelete(a.trj.alg.acc.ind,curIv,pagesOnlyJoin);
                a.trj.alg.acc.std = cellPageDelete(a.trj.alg.acc.std,curIv,pagesOnlyJoin);
                a.trj.alg.acc.avg = cellPageDelete(a.trj.alg.acc.avg,curIv,pagesOnlyJoin);               
            end
        end                                        
        % PROTOTYPE START
        a.trj.wrp.ang.tgt.ind = cellPageDelete(a.trj.wrp.ang.tgt.ind,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.tgt.std = cellPageDelete(a.trj.wrp.ang.tgt.std,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.tgt.avg = cellPageDelete(a.trj.wrp.ang.tgt.avg,curIv,pagesOnlyJoin);
        
        a.trj.wrp.ang.ref.ind = cellPageDelete(a.trj.wrp.ang.ref.ind,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.ref.std = cellPageDelete(a.trj.wrp.ang.ref.std,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.ref.avg = cellPageDelete(a.trj.wrp.ang.ref.avg,curIv,pagesOnlyJoin);
        
        a.trj.wrp.ang.dtr.ind = cellPageDelete(a.trj.wrp.ang.dtr.ind,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.dtr.std = cellPageDelete(a.trj.wrp.ang.dtr.std,curIv,pagesOnlyJoin);
        a.trj.wrp.ang.dtr.avg = cellPageDelete(a.trj.wrp.ang.dtr.avg,curIv,pagesOnlyJoin);
        % PROTOTYPE END
        
        
    end

    disp(['Lowest case number in any condition AFTER joining levels (by MoM): ', num2str(min(a.res.ncs(:))), ' (all case numbers are listed by condition in a.res.ncs)']);
    
else
    
    disp('No conditions are joined');
    
end

warning('on','combIVL:errBal');
warning('on','cellMeanFun:EmptyCells');

clearvars -except a e tg aTmp